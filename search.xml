<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[测试主动推送]]></title>
    <url>%2F2017%2F09%2F15%2F17.test%2F</url>
    <content type="text"><![CDATA[测试主动推送 如果绑定了个性域名的话，可以将个性域名指向两个主页，一般国外指向 github，国内指向 coding，这样访问速度也会快一些。dnspod 配置如下： 主机记录 记录类型 线路类型 记录值 * CNAME 国内 xxxxx.coding.me @ CNAME 国内 xxxxx.coding.me www CNAME 国内 xxxxx.coding.me www CNAME 默认 pages.coding.me www CNAME 国外 xxxxx.github.io 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用七牛作为图床]]></title>
    <url>%2F2017%2F09%2F12%2F15.%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A%2F</url>
    <content type="text"><![CDATA[通常图片可以放在服务器里面随博文一起外发，但如果使用类似github之类的静态页的话空间很有限，所以我们需要从网络上链接到图片以节省空间。 这里推荐使用七牛（10GB免费存储，每月10GB免费下载流量）。 注册七牛首先需要注册并登陆七牛，按照官网说明创建空间（最好创建公开空间）。 上传图片 使用网页上传 我创建的空间为hexo-image-store，打开存储空间的内容管理，可以从这里上传图片（通过上传文件）。 图片URL由外链加相对路径下的随机码组成，图中的图片URL如下： 1http://ow2qstwlo.bkt.clouddn.com/Blog/170911/jBj4c87IiE.jpg 使用图床神器上传 下载MPic-图床神器，设置账号。空间名为七牛对象存储空间名称（类似于刚刚创建的hexo-image-store），AccessKey和SecretKey在七牛个人面板下的密钥管理中，域名为七牛对象存储空间中内容管理页签下的外链默认域名。 配置好七牛账号后看到图床神器的面板： 将图片拖动到面板上即可上传到我们对应的空间，上传成功后面板变成下面的样子： 点击复制后默认得到Markdown格式的代码，可以直接贴到你的Markdown文本中： 1![mark](http://ow2qstwlo.bkt.clouddn.com/Blog/170912/jH6eJgHI5i.png?imageslim) 其中mark处表示图片还未加载成功时显示的替换文本；还可以在最后的括号前加”xxx”来作为图片下标，示例如下： 1![上传成功](http://ow2qstwlo.bkt.clouddn.com/Blog/170912/jH6eJgHI5i.png?imageslim "上传成功后面板样式") 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何将Hexo博客登入百度入口]]></title>
    <url>%2F2017%2F09%2F12%2F16.%E5%A6%82%E4%BD%95%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E7%99%BB%E5%85%A5%E7%99%BE%E5%BA%A6%E5%85%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[通常我们会把 Hexo 博客挂到 github pages 上，但这样无法被百度收录，所以这里推荐将 Hexo 部署到 coding 上面。 将 Hexo 同时部署到 github 及 coding 上面首先是创建 coding 的 ssh 秘钥并绑定到 coding 上，这样可以免密推送。具体与 github 上面的设置类似，就不赘述了。 编辑站点配置文件，如下： 1234deploy: type: git repository: git@github.com:xxxxx/xxxxx.github.io.git branch: master 将部署格式改为下面这种形式，即可将Hexo博客同步部署到 github 及 coding。 12345deploy: type: git repo: github: git@github.com:xxxxx/xxxxx.github.io.git,master coding: git@git.coding.net:xxxxx/xxxxx.coding.me.git,master coding 上面的 pages 的配置过程这里也不赘述了。 域名解析如果绑定了个性域名的话，可以将个性域名指向两个主页，一般国外指向 github，国内指向 coding，这样访问速度也会快一些。dnspod 配置如下： 主机记录 记录类型 线路类型 记录值 * CNAME 国内 xxxxx.coding.me @ CNAME 国内 xxxxx.coding.me www CNAME 国内 xxxxx.coding.me www CNAME 默认 pages.coding.me www CNAME 国外 xxxxx.github.io 注意：个性域名如果没有备案的话，友言评论会报抱歉，当前网页参数有误，操作失败。 百度站长入口百度站长平台支持html文件、html标签及CNAME三种方法来验证域名归属，推荐使用html文件方法。 为了不让验证的html文件改变，需要将html文件放置到主题目录下的source文件夹下，之后就可以验证域名归属了。 接下来在博客根目录下安装站点地图插件： 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在博客目录的_config.yml中添加如下代码： 12345# 自动生成sitemapsitemap:path: sitemap.xmlbaidusitemap:path: baidusitemap.xml 在主题目录的_config.yml中使能百度推送： 1baidu_push: true 之后就可以在百度站长入口中抓取到你博客的链接了。 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加评论及打赏功能]]></title>
    <url>%2F2017%2F09%2F10%2F14.Hexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8F%8A%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[添加友言评论功能 注册友言 打开友言官网，单击“注册”按钮后注册 获取uid 单击“后台管理”获取ID 配置友言 编辑主题配置文件，插入uid 123# Support for youyan comments system.# You can get your uid from http://www.uyan.cc# youyan_uid: your uid 编辑站点配置文件，添加以下内容 123# Support for youyan comments system.# You can get your uid from http://www.uyan.ccyouyan_uid: xxxxx 添加打赏功能 获取微信收款二维码及支付宝收款二维码 请自行百度吧 将二维码图片放到主题根目录/source/images/文件夹 尽量使用英文 开启打赏功能 找到主题配置文件，在其最后添加打赏的配置信息 12345# Reward#reward_comment: Donate comment here#wechatpay: /images/wechatpay.jpg#alipay: /images/alipay.jpg#bitcoin: /images/bitcoin.png 去掉微信支付及阿里支付前的注释符号，并将后面的图片换成自己的图片名 123reward_comment: 打赏请看这儿wechatpay: /images/weixinsoukuan_20170910223421.jpgalipay: /images/zhifubaoshoukuan_20170910223530.jpg 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加本地搜索功能]]></title>
    <url>%2F2017%2F09%2F09%2F13.Hexo%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[安装 hexo-generator-search： 1npm install hexo-generator-search --save 安装 hexo-generator-searchdb： 1npm install hexo-generator-searchdb --save 启动搜索： 编辑主题配置文件，启动本地搜索功能 12local_search: enable: true 编辑站点配置文件，添加以下内容 12345search: path: search.xml field: post format: html limit: 10000 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GIT warning LF will be replaced by CRLF 解决方法]]></title>
    <url>%2F2017%2F09%2F09%2F12.GIT%20warning%20LF%20will%20be%20replaced%20by%20CRLF%2F</url>
    <content type="text"><![CDATA[问题描述： 使用Hexo部署静态页到GIthub上的时候提示 1Warning: LF will be replaced by CRLF 问题解析： CR – Carriage-Return 回车(CR, ASCII 13, \r) LF – Line-Feed 换行(LF, ASCII 10, \n) 在Windows中广泛使用回车换行来标识一行的结束（CRLF），而在Linux/UNIX系统中只有换行符（LF），但两个ACSII字符不会在屏幕有任何输出。 解决方案： 1git config --gobal core.autocrlf false 谢谢观看！]]></content>
      <categories>
        <category>Git学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo去掉底部强力驱动及主题字样]]></title>
    <url>%2F2017%2F09%2F08%2F11.Hexo%E5%8E%BB%E6%8E%89%E5%BA%95%E9%83%A8%E5%BC%BA%E5%8A%9B%E9%A9%B1%E5%8A%A8%E5%8F%8A%E4%B8%BB%E9%A2%98%E5%AD%97%E6%A0%B7%2F</url>
    <content type="text"><![CDATA[找到 \themes\next\layout_partials\下面的footer.swig文件，打开： 12345678910&lt;div class="powered-by"&gt; &#123;&#123; __('footer.powered', '&lt;a class="theme-link" href="https://hexo.io"&gt;Hexo&lt;/a&gt;') &#125;&#125;&lt;/div&gt;&lt;div class="theme-info"&gt; &#123;&#123; __('footer.theme') &#125;&#125; - &lt;a class="theme-link" href="https://github.com/iissnan/hexo-theme-next"&gt; NexT.&#123;&#123; theme.scheme &#125;&#125; &lt;/a&gt;&lt;/div&gt; 第一条是“由Hexo驱动” 的Hexo链接，把xml段删除，只留两个单引号&apos;&apos;。 第二条是“主题-Next.XX”，将xml段都删掉，不留引号。 1234567&lt;div class="powered-by"&gt; &#123;&#123; __('footer.powered', '') &#125;&#125;&lt;/div&gt;&lt;div class="theme-info"&gt; &#123;&#123; __('footer.theme') &#125;&#125;&lt;/div&gt; 找到这个地方\themes\next\languages\ 下面的语言文件zh-Hans.yml（以中文为例）： 123footer: powered: "由 %s 强力驱动" theme: 主题 将上面的文字改成自己想要的即可。 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo新建分类页]]></title>
    <url>%2F2017%2F09%2F08%2F10.Hexo%E6%96%B0%E5%BB%BA%E5%88%86%E7%B1%BB%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[新建一个页面，命名为categories。 1hexo new page categories 编辑刚新建的页面，将页面的类型设置为categories。 12345---title: 分类date: 2014-12-22 12:39:04type: "categories"--- 编辑主题的_config.yml，将menu中的categories: /categories注释去掉。 12345menu: home: / categories: /categories archives: /archives tags: /tags 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 下 Hexo环境的搭建]]></title>
    <url>%2F2017%2F09%2F08%2F9.Windows%E4%B8%8BHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[到 https://nodejs.org/en/ 下载最新的Node并安装，目前是v8.4.0。 执行以下命令安装hexo。 123456789101112131415161718192021# 安装hexonpm install hexo-cli g# 初始化博客文件夹hexo init Hexo# 切换到该路径cd Hexo# 安装hexo的扩展插件npm install# 安装其它插件npm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --save 生成测试界面 1hexo g 本地调试 1hexo server 浏览器输入 http://localhost:4000 就能看到标准的 hello hexo 啦。 常用指令 12345678910hexo clean # 清理hexo new "postName" # 新建文章hexo new page "pageName" # 新建页面hexo generate # 生成静态页面至public目录hexo server # 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy # 将.deploy目录部署到GitHubhexo help # 查看帮助hexo version # 查看Hexo的版本hexo clean &amp;&amp; hexo g -s # 清除、生成、启动hexo clean &amp;&amp; hexo g -d # 清除、生成、部署 博文 文章在source/_posts下，推荐使用MD；博客的标题等常规参数在_config.yml文件中修改；主题推荐Next。 ps 建议把整个博客目录上传到github上面，便于更换电脑时方便同步（如Windows与Ubuntu之间的同步）。 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下嵌入式开发环境的搭建]]></title>
    <url>%2F2017%2F05%2F09%2F8.Ubuntu%E4%B8%8B%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[系统及软件信息系统版本：ubuntu 17.04 LTS 一：安装linux下的JLink驱动JLink驱动下载http://www.segger.com/cms/jlink-software.html，我下载的版本是JLink_Linux_V614f_x86_64.tgz。按照里面的readme说明操作，同时推荐将解压出来的文件夹拷贝到opt/下，便于统一管理。PS.虽然官网上可以下载到deb包，但是当前系统版本不支持安装，所以用tgz了。 二：安装java并配置环境变量不赘述。 三：安装 Eclipse IDE for C/C++ Developers 环境不赘述。 四：安装 GUN ARM 插件安装eclipse后点击 HELP -&gt; eclipse marketpalce，在find 里输入 ARM 我们会看到GNU ARM Eclipse 3.4.1(插件的版本号可能不一样)，点击“install”即可安装。之后在 HELP -&gt; install new software 中输入 GNU ARM Eclipse Plug-ins - http://gnuarmeclipse.sourceforge.NET/updates 安装调试工具（JLink/OpenOCD等），建议全部安装。 五：新建工程建立一个STM32fXX的工程，一直点击下一步，只需要设置编译器的位置。ARM官网 https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads 下载 gcc-arm-none-eabi-6-2017-q1-update-linux.tar.bz2，然后解压，设置好编译器的路径，如果编译工具链无误的话能顺利编译成功。PS.此处建议参考我的另一篇文章：Ubuntu 16.04 下 arm-none-linux-gnueabi 的安装。 六：调试配置首先在eclipse全局属性里设置JLinkGDBServer的路径，然后Debug Configurations -&gt; GDB SEGGER J-Link Debug -&gt; Debugger 选择好合适的设备，此处我们选择 STM32F103ZE，横选项startup栏目下输入下面的设置： 12345678910111213141516171819202122# Enable flash download and flash breakpoints.# Flash download and flash breakpoints are features of# the J-Link software which require separate licenses# from SEGGER.# Select flash device monitor flash device = STM32F103ZE# Enable FlashDL and FlashBPs monitor flash download = 1 monitor flash breakpoints = 1# Clear all pendig breakpoints monitor clrbp# Set gdb server to little endian monitor endian little# Set JTAG speed to 5 kHz monitor speed 5# Reset the target monitor reset monitor sleep 100# Set JTAG speed in khz monitor speed auto# Vector table placed in Flash monitor writeu32 0xE000ED08 = 0x00000000 通过JLINK连接STM32开发板，之后开始愉快的Debug。 谢谢观看！]]></content>
      <categories>
        <category>Ubuntu学习</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git的免输入密码推送拉取]]></title>
    <url>%2F2017%2F04%2F27%2F7.Git%E7%9A%84%E5%85%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%8E%A8%E9%80%81%E6%8B%89%E5%8F%96%2F</url>
    <content type="text"><![CDATA[1. RSA key 免密操作首先配置你的git用户名及邮箱，并生成rsa key： 123$ git config --global user.name "你的名字"$ git config --global user.email "你的邮箱"$ ssh-keygen -t rsa -C "你的邮箱" 之后，在 ~/.ssh/ 下找到公钥 id_rsa_pub 。然后登录你的代码托管工具，如github、git@osc、coding等，将该公钥一字不差地配置到ssh中，之后使用 ssh url 克隆项目，后续的推拉就不需要输入用户名及密码了。 2. 配置credential helper有时我们会使用 http url 来克隆代码，这种方式相对宽松些，不需要配置本地 ssh，但需要在每次同步操作输入用户名和密码。通过 credential helper 可以帮我们存储凭证（即用户名和密码)，只需要在第一次clone输入用户名和密码，之后就可以自动读取，不需要再手动输入了。 使用下面的指令来进行配置：1git config --global credential.helper store 3. 将 http url 修改为 ssh url有的时候我们需要将 http url 更改为 ssh url （由于我们配置了rsa key但是使用了http url导致需要输入密码），这时候很多同学的做法是在另一个目录下使用 ssh url 重新clone一份，累死人不偿命。其实解决方案很简单，在你的 repo 的目录下，输入： 12$ cd .git$ gedit config 然后将 [remote “origin”] 标签下的 url 值改为 ssh url 的值就好了： 1url = git@github.com:[your_id]/[repo_name].git 谢谢观看！]]></content>
      <categories>
        <category>Git学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署Hexo到git@osc上]]></title>
    <url>%2F2017%2F04%2F27%2F6.%E9%83%A8%E7%BD%B2Hexo%E5%88%B0git%40osc%E4%B8%8A%2F</url>
    <content type="text"><![CDATA[1. 准备如果你使用过 Github Pages ，那么上手使用码云的Pages服务会很轻松。使用码云上的Pages相较于Github Pages，访问速度会更快，毕竟是在国内，木有梯子的话，你懂的。关于Hexo的基本操作及环境准备请参考我的博文《Ubuntu 16.04 下 Hexo环境的搭建》及《部署Hexo到github上》。 2. 注册登录 https://git.oschina.net/ 注册账号，并创建一个仓库，仓库名不限制。但如果你想以根目录的形式访问自己的静态网站，需要建立一个与自己个性地址同名的项目，如 http://git.oschina.net/shauew 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以 shauew.oschina.io 直接访问，那么他需要创建一个名字为shauew的项目 http://git.oschina.net/shauew/shauew 。部署完成后，就可以通过 http://shauew.oschina.io 进行访问了。 3. 部署这里的部署与github上一致，唯一的区别只是部署的地址不一样。 修改根目录下的_config.yml中的仓库地址： 1234deploy:type: gitrepository: #这里设置git@osc资源库的ssh地址（ssh地址添加ras公钥后可以免密）branch: master 注意：这里的设置冒号后面必须有空格。 然后执行如下命令进行部署： 12hexo generatehexo deploy #上述两条指令等价于 hexo deploy -g 4. 启动进入上面新建的仓库，可以看到我们部署的静态页已经推送上来了。点击服务下拉Pages，下拉进入，再点击启动服务完成部署。之后使用我们的个性域名 shauew.oschina.io 就可以访问到这个门户啦。遗憾的是git@osc的Pages不像github那样可以支持域名绑定，目前只能通过oschina来访问。 谢谢观看！ps.可以将之前部署到github上的主页完全克隆过来，之后只要在仓库里启动Pages服务就可以使用门户进行访问了（当github上的内容更新之后，需要在码云上强制同步）。]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下搜狗输入法无法输入中文解决]]></title>
    <url>%2F2017%2F04%2F25%2F5.Ubuntu%E4%B8%8B%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[系统及软件信息系统版本：ubuntu 17.04 LTS搜狗版本：sogoupinyin_2.1.0.0082_amd64fcitx版本：4.2.9.1 一：重启搜狗输入法通过下面的两个命令重启搜狗输入法，看重启后是否可以正常使用： 12~$ killall fcitx~$ killall sogou-qinpanel 二：检查修复安装依赖因为我之前是可以正常使用的，所以应该不是安装依赖的问题。刚安装好的朋友如果无法使用，可以用下面的命令排除或修复安装依赖问题 1~$ sudo apt-get install -f 三：删除配置文件，重启搜狗ubuntu下搜狗的配置文件在 ~/.config下的3个文件夹里：SogouPY、SogouPY.users、sogou-qimpanel删除这3个文件夹，然后重启搜狗。我使用这种方法后解决了无法输入中文问题。 谢谢观看！]]></content>
      <categories>
        <category>Ubuntu学习</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加归档、标签等页面]]></title>
    <url>%2F2017%2F04%2F25%2F4.Hexo%E6%B7%BB%E5%8A%A0%E5%BD%92%E6%A1%A3%E3%80%81%E6%A0%87%E7%AD%BE%E7%AD%89%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[首先我们使用的是NexT主题，其他主题也可以参考该操作 在/Hexo/themes/next路径下找到_config.yml文件 使用文本编辑软件打开该文件 12345678menu: home: / #categories: /categories #about: /about #archives: /archives tags: /tags //确保标签页已打开 #schedule: /schedule #commonweal: /404.html 将欲打开的页面前的#号干掉，使用 hexo server 调试可以看到对应页面打开了，但单击出现Cannot GET /categories/，添加对应页面内容见下章 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署Hexo到github上]]></title>
    <url>%2F2017%2F03%2F30%2F3.%E9%83%A8%E7%BD%B2Hexo%E5%88%B0github%E4%B8%8A%2F</url>
    <content type="text"><![CDATA[安装git 创建github账户，假设账户为 xxxx 创建仓库，仓库的名称必须要注意：xxxx.github.io，其中xxxx为账户名 进行部署： 修改_config.yml文件: 1234deploy:type: gitrepository: 这里设置github资源库的ssh地址branch: master 注意：这里的设置冒号后面必须有空格 执行如下命令： 12hexo generatehexo deploy #上述两条指令等价于 hexo deploy -g github门户地址 http://xxxx.github.io xxxx为账号名 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04 下 Hexo环境的搭建]]></title>
    <url>%2F2017%2F03%2F30%2F2.Hexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[到 https://nodejs.org/en/ 下载最新的Node并安装，推荐v7.8.0。 安装Hexo。 1$ sudo npm install -g hexo 初始化 创建一个文件夹，如：Hexo，cd到Hexo里执行hexo init的。命令： 1hexo init 生成初始界面 1hexo g 本地调试 1hexo server 浏览器输入 http://localhost:4000 就能看到标准的 hello hexo 啦。 常用指令 12345678hexo clean #清理hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 ps 文章在source/_posts下，推荐使用MD；博客的标题等常规参数在_config.yml文件中修改；主题推荐Next。 谢谢观看！]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 16.04 下 arm-none-linux-gnueabi 的安装]]></title>
    <url>%2F2017%2F03%2F15%2F1.Ubuntu16.04%E4%B8%8Barm-none-linux-gnueabi%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[1.先下载最新的安装包arm-2014.05-29-arm-none-Linux-gnueabi-i686-pc-linux-gnu.tar.bz2，推荐下载地址 http://pan.baidu.com/s/1mgyYfos。 2.拷贝至目标文件夹并解压缩，推荐如下路径123$ sudo cp arm-2014.05-29-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2 /usr/local$ cd /usr/local$ sudo tar -jxvf arm-2014.05-29-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2 3.配置环境变量，使其生效1$ sudo vim /etc/bash.bashrc 在最后添加1PATH=$PATH:/usr/local/arm-2014.05/bin :wq退出，source使其立即生效1$ source /etc/bash.bashrc 4.输入arm-，按tab键会自动补齐arm-none-linux-gnueabi-，添加gcc -v并回车，如果有版本信息输出，则大功告成。 5.如果出现 没有那个文件或目录 （no such file or ……）,则需要安装32位兼容包，键入下面的命令即可：1$ sudo apt-get install lib32ncurses5 lib32z1 谢谢观看！]]></content>
      <categories>
        <category>Ubuntu学习</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu启动时间过长解决（两分多钟）]]></title>
    <url>%2F2017%2F03%2F13%2F0.Ubuntu%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%E8%BF%87%E9%95%BF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[是不是会遇到这种情况，明明配置了SSD，且平时Windows下启动也很快。但是安装Ubuntu之后刚开始启动很快，使用一段后或是重置引导，或是Windows下磁盘分区、调整大小等操作后，发现Ubuntu启动奇慢？ 问题分析在进行上述的磁盘操作后，可能导致Ubuntu下的盘符发生变化。可以通过grub修复或是EasyBCD修复后可以重新找回Ubuntu系统，但是此时swap分区的ID也发生变化了，而/etc/fstab文件夹中的交换分区的UUID并没有更新，所以启动时交换分区加载出错，导致启动时间变长。（按理说Ubuntu启动应该比Windows快才读，何况是SSD，两分半钟是什么鬼？） 解决方案如果内存够大（8G+），则可以尝试注释掉/etc/fstab中的swap分区，如下： 12345678910111213$ sudo vim /etc/fstab# /etc/fstab: static file system information.## Use 'blkid' to print the universally unique identifier for a# device; this may be used with UUID= as a more robust way to name devices# that works even if disks are added and removed. See fstab(5).## &lt;file system&gt; &lt;mount point&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;# / was on /dev/sda2 during installationUUID=850088d8-2274-4504-be9b-d4d5959a67a3 / ext4 errors=remount-ro 0 1# swap was on /dev/sda4 during installation#UUID=f5671da1-9906-4b4c-9613-6e84f9001fa9 none swap sw 0 0 修改完成后保存，然后重启： 1$ sudo reboot 如果恢复快速启动，则问题锁定，可以在重启后使用GParted等工具查看最新的swap分区的UUID，修改到/etc/fstab中去。再次启动后通过系统监视器查看交换分区加载情况即可。 小结重装Ubuntu是一件比较蛋疼的事，软件环境配置不像Windows那样可以ghost。如果这种方法可以解决你的问题那就不必费劲重装、重新构建环境了。 谢谢观看！]]></content>
      <categories>
        <category>Ubuntu学习</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
</search>
